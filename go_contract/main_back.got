package main

import (
	"context"
	"fmt"
	"log"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

func main2() {
	// Replace with your Ethereum client endpoint (e.g., Infura)
	client, err := ethclient.Dial("127.0.0.1:8545")
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}

	// Replace with the address of the deployed smart contract
	contractAddress := common.HexToAddress("0x3A807221560e4b34652333183A9B03A2FE5885A7")

	abiJSON := `[
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_address",
				"type": "address"
			}
		],
		"name": "isKYCed",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "kycedAddresses",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_address",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "_status",
				"type": "bool"
			}
		],
		"name": "setKYCStatus",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]`
	// Parse the ABI
	contractAbi, err := abi.JSON(strings.NewReader(abiJSON))
	if err != nil {
		log.Fatalf("Failed to parse ABI: %v", err)
	}

	// Instantiate the contract
	instance, err := NewContract(contractAddress, contractAbi, client)
	if err != nil {
		log.Fatalf("Failed to instantiate contract: %v", err)
	}

	// Call a read-only function on the smart contract
	callOpts := &ethereum.CallOpts{Context: context.Background()}
	result, err := instance.GetValue(callOpts)
	if err != nil {
		log.Fatalf("Failed to call getValue function: %v", err)
	}

	fmt.Printf("Result of getValue: %s\n", result.String())
}

// Contract is the Go binding interface for the smart contract.
type Contract struct {
	contract *ethclient.Contract
}

// NewContract creates a new instance of the smart contract.
func NewContract(address common.Address, abi abi.ABI, client *ethclient.Client) (*Contract, error) {
	contract, err := ethclient.NewContract(address, abi, client)
	if err != nil {
		return nil, err
	}
	return &Contract{contract: contract}, nil
}

// GetValue is a read-only function on the smart contract.
func (c *Contract) GetValue(opts *ethereum.CallOpts) (bool, error) {
	return c.contract.Call(opts, "isKYCed")
}

